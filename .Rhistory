ggplot(iris, aes(PC1, PC2, col= iris$Species, fill = iris$Species))+
stat_ellipse(geom = "polygon", col= "black", alpha= 0.5)+
geom_point(shape= 21, col= "black")
library(factoextra)
library(FactoMineR)
#PCA Table
iris.pca <- PCA(iris[,-5], graph = TRUE, scale.unit = TRUE)
#screeplot
fviz_eig(iris.pca, addlabels = TRUE)
library(ggplot2)
ggplot(iris, aes(PC1, PC2, col= iris$Species, fill = iris$Species))+
stat_ellipse(geom = "polygon", col= "black", alpha= 0.5)+
geom_point(shape= 21, col= "black")
library(factoextra)
library(FactoMineR)
#PCA Table
iris.pca <- PCA(iris[,-5], graph = TRUE, scale.unit = TRUE)
#screeplot
fviz_eig(iris.pca, addlabels = TRUE)
#screeplot
fviz_eig(iris.pca, addlabels = TRUE)
#screeplot
fviz_eig(iris.pca, addlabels = TRUE, ylim= c(0,70))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("dcb443", "ac7b44", "6d2837", "3e0732"))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("d6ae43", "ac7b44", "6d2837", "3e0732"))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("dbb444", "ac7b44", "6d2837", "3e0732"))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("red", "blue", "green", "yellow"))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("red", "blue", "green", "pink"))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("red", "pink", "green", "blue"))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("red", "pink", "green", "black"))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("pink", "orange", "red", "black"))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("yellow", "orange", "red", "black"))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("red", "orange", "green", "black"))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("red", "orange", "green", "400731"))
#PCA plot
fviz_pca_var(iris.pca, col.var = "cos2",
gradient.col = c("red", "orange", "green", "black"))
ggplot(iris, aes(PC1, PC2, col= iris$Species, fill = iris$Species))+
stat_ellipse(geom = "polygon", col= "black", alpha= 0.5)+
geom_point(shape= 21, col= "black")
#1-heatmap
x <- mtcars
print(x)
View(x)
heatmap(x)
x <- as.matrix(mtcars)
heatmap(x)
heatmap(x, scale = "coloum")
heatmap(x, scale = "coloum",)
heatmap(x, scale = "column")
heatmap(x, scale = "coloum")
heatmap(x, scale = "column")
#2-gplots
install.packages("gplots")
library(gplots)
heatmap.2(x, scale = "column", col = bluered(100))
heatmap(x, scale = "column")
heatmap.2(x, scale = "column", col = bluered(100))
?heatmap.2()
install.packages("pheatmap")
library(pheatmap)
pheatmap(x, scale = "column")
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 2)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 3)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 2)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 3)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 4)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 5)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 4)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 5)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 6)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 7)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 8)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 9)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 10)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 11)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 12)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 2)
library(ggplot2)
y <- iris
View(iris)
library(ggplot2)
y <- iris
View(iris)
x <- as.matrix(mtcars)
heatmap(x, scale = "column")
library(gplots)
heatmap.2(x, scale = "column", col = bluered(100))
library(pheatmap)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 2)
library(ggplot2)
y <- iris
View(iris)
df <- df[, -((ncol(df)-3):ncol(df))]
# Assuming your data frame is named df
df <- df[, -((ncol(df)-3):ncol(df))]
df <- df[, !names(df) %in% c("PC1", "PC2", "PC3", "PC4")]
df <- df[, !names(df) %in% c("PC1", "PC2", "PC3", "PC4")]
df <- df[, !names(y) %in% c("PC1", "PC2", "PC3", "PC4")]
y <- y[, !names(y) %n% c("PC1", "PC2", "PC3", "PC4")]
y
View(y)
y <- y[, 1:(ncol(y) - 4)]
View(y)
#PCA = Principal componant analysis
x <- prcomp(iris[, -5], center = TRUE, scale. = TRUE)
View(x)
data("iris")
View(iris)
#PCA = Principal componant analysis
x <- prcomp(iris[, -5], center = TRUE, scale. = TRUE)
View(x)
View(x)
View(x)
View(x)
install.packages("reshape")
library(reshape)
y1 <- melt(y)
View(y1)
library(dplyr)
y1 <- y%>%, melt()
y1 <- y %>%
melt()
View(y1)
ggplot(y1, aes(Species, variable, fill = value))+
geom_tile()
ggplot(y1, aes(Species, variable, colour = value))+
geom_tile()
ggplot(y1, aes(Species, variable, fill = value))+
geom_tile()
ggplot(y1, aes(Species, variable, fill = value))+
geom_tile()+
scale_fill_gradient(low = "yellow", high = "red")
ggplot(y1, aes(Species, variable, fill = value))+
geom_tile()+
scale_fill_gradient(low = "yellow", high = "red")
ggplot(y1, aes(Species, variable, fill = value))+
geom_tile()
ggplot(y1, aes(Species, variable, fill = value))+
geom_tile()+
scale_fill_gradient(low = "yellow", high = "red")
heatmap(x, scale = "column")
#1-heatmap
x <- mtcars
print(x)
View(x)
x <- as.matrix(mtcars)
heatmap(x, scale = "column")
library(gplots)
heatmap.2(x, scale = "column", col = bluered(100))
library(pheatmap)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 2)
library(ggplot2)
ggplot(y1, aes(Species, variable, fill = value))+
geom_tile()+
scale_fill_gradient(low = "yellow", high = "red")
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 2)
pheatmap(x, scale = "column", cutree_rows = 4, cutree_cols = 2)
ggplot(y1, aes(Species, variable, fill = value))+
geom_tile()+
scale_fill_gradient(low = "yellow", high = "red")
library(ggplot2)
library(multcompView)
library(multcompView)
library(dplyr)
install.packages(ggthemes)
install.packages("ggtheme")
install.packages(ggthemes)
install.packages(ggthemes)
install.packages(ggthemes)
install.packages(ggthemes)
install.packages(ggthemes)
install.packages("ggthemes")
library(ggthemes)
#import data
data("chickwts")
View(chickwts)
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
View(mean_data)
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
?group_by()
?%>%
data("iris")
force(iris)
View(iris)
library(reshape)
y1 <- y %>%
melt()
y1 <- y %>%
melt()
y1 <- y %>%
melt()
y <- iris
View(iris)
library(reshape)
y1 <- y %>%
melt()
y1 <- y %>%
melt()
View(y1)
y1 <- y %>%
melt()
library(dplyr)
y1 <- y %>%
melt()
tibble(mean_data)
##Barplot from scratch (one way anova)
library(ggplot2)
library(multcompView)
library(dplyr)
library(ggthemes)
#1-import data
data("chickwts")
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
View(mean_data)
tibble(mean_data)
##3- this step involves performing analysis of variance "anova" using builtin  "aov()" function
library(anova)
install.packages("anova")
##3- this step involves performing analysis of variance "anova" using builtin  "aov()" function
library(stats)
anova <- aov(weights ~ feed, data = chickwts)
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
anova <- aov(weights ~ feed, data = chickwts)
summary(anova)
library(ggplot2)
library(multcompView)
library(dplyr)
library(ggthemes)
#1-import data
data("chickwts")
View(chickwts)
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
View(mean_data)
tibble(mean_data)
##3- this step involves performing analysis of variance "anova" using builtin  "aov()" function
library(stats)
##3- this step involves performing analysis of variance "anova" using builtin  "aov()" function
library(stats)
library(stats)
data()
anova <- aov(weights ~ feed, data = chickwts)
summary(anova)
data("chickwts")
anova <- aov(weights ~ feed, data = chickwts)
x <- as.matrix(chickwts)
View(x)
anova <- aov(weights ~ feed, data = chickwts)
data("chickwts")
anova <- aov(weights ~ feed, data = chickwts)
anova <- aov(weight ~ feed, data = chickwts)
summary(anova)
##Barplot from scratch (one way anova)
library(ggplot2)
library(multcompView)
library(dplyr)
library(ggthemes)
#1-import data
data("chickwts")
#Draw bar plots
p <- ggplot(mean_data, aes(x = feed, y = weight_mean))+
geom_bar(stat = "identity", aes(fill = feed), show.legend = F, width = 0.6)
##Barplot from scratch (one way anova)
library(ggplot2)
library(multcompView)
library(dplyr)
install.packages("ggthemes")
library(ggthemes)
#1-import data
data("chickwts")
View(chickwts)
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
View(mean_data)
tibble(mean_data)
##3- this step involves performing analysis of variance "anova" using builtin  "aov()" function
library(stats)
data("chickwts")
anova <- aov(weight ~ feed, data = chickwts)
summary(anova)
##4- if the anova is significantly different them, we will draw a multiple mean comperision
tukey <- TukeyHSD(anova)
tukey
##5- Draw multiple comparison letters using "multcomp" R package as follow
group_letters <- multcompLetters4(anova, tukey)
View(group_letters)
group_letters
## extracting group letters
group_letters <- as.data.frame.list(group_letters$feed)
group_letters
colnames(group_letters)
mean_data$group_letters <- group_letters$Letters
mean_data <- merge(mean_data, group_letters, by = "feed")
ggplot(mean_data, aes(x = feed, y = weight_mean))+
geom_bar(stat = "identity", aes(fill = feed), show.legend = F, width = 0.6
ggplot(mean_data, aes(x = feed, y = weight_mean))+
#Draw bar plots
p <- ggplot(mean_data, aes(x = feed, y = weight_mean))+
geom_bar(stat = "identity", aes(fill = feed), show.legend = F, width = 0.6)
##Barplot from scratch (one way anova)
library(ggplot2)
library(multcompView)
library(dplyr)
library(ggthemes)
#1-import data
data("chickwts")
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
tibble(mean_data)
data("chickwts")
anova <- aov(weight ~ feed, data = chickwts)
summary(anova)
##4- if the anova is significantly different them, we will draw a multiple mean comperision
tukey <- TukeyHSD(anova)
tukey
##5- Draw multiple comparison letters using "multcomp" R package as follow
group_letters <- multcompLetters4(anova, tukey)
group_letters
## extracting group letters
group_letters <- as.data.frame.list(group_letters$feed)
group_letters
colnames(group_letters)
mean_data$group_letters <- group_letters$Letters
mean_data <- merge(mean_data, group_letters, by = "feed")
mean_data$group_letters <- group_letters$letters
tibble(mean_data)
#Draw bar plots
p <- ggplot(mean_data, aes(x = feed, y = weight_mean))+
geom_bar(stat = "identity", aes(fill = feed), show.legend = F, width = 0.6)
#Draw bar plots
p <- ggplot(mean_data, aes(x = feed, y = weight_mean))+
geom_bar(stat = "identity", aes(fill = feed), show.legend = F, width = 0.6)
ggplot(mean_data, aes(x = feed, y = weight_mean))+
geom_bar(stat = "identity", aes(fill = feed), show.legend = F, width = 0.6)
#Draw bar plots
p <- ggplot(mean_data, aes(x = feed, y = weight_mean))+
geom_bar(stat = "identity", aes(fill = feed), show.legend = F, width = 0.6) +
geom_errorbar( #this func is putting sd as error bar
aes(ymin = weight_mean - sd, ymax = weight_mean + sd),
width = 0.1)
ggplot(mean_data, aes(x = feed, y = weight_mean))+
geom_bar(stat = "identity", aes(fill = feed), show.legend = F, width = 0.6) +
geom_errorbar( #this func is putting sd as error bar
aes(ymin = weight_mean - sd, ymax = weight_mean + sd),
width = 0.1)
##Barplot from scratch (one way anova)
library(ggplot2)
library(multcompView)
library(dplyr)
library(ggthemes)
library(stats)
##5- Draw multiple comparison letters using "multcomp" R package as follow
group_letters <- multcompLetters4(anova, tukey)
View(group_letters)
group_letters
anova <- aov(weight ~ feed, data = chickwts)
summary(anova)
##4- if the anova is significantly different them, we will draw a multiple mean comperision
tukey <- TukeyHSD(anova)
tukey
##5- Draw multiple comparison letters using "multcomp" R package as follow
group_letters <- multcompLetters4(anova, tukey)
View(group_letters)
group_letters
is.data.frame(group_letters)
is.vector(group_letters)
dim(group_letters)
labels(group_letters)
#1-import data
data("chickwts")
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
rm(list = ls())
##Barplot from scratch (one way anova)
library(ggplot2)
library(multcompView)
library(dplyr)
library(ggthemes)
#1-import data
data("chickwts")
#2-calculate "mean" of treatment groups & the "standard deviation" SD to show on error bar as follows:
mean_data <- group_by(chickwts, feed) %>% #feed is my treatment here
summarise(weight_mean= mean(weight), sd = sd(weight)) %>%  #to calculate mean & SD
arrange(desc(weight_mean))
tibble(mean_data)
library(stats)
data("chickwts")
anova <- aov(weight ~ feed, data = chickwts)
summary(anova)
##4- if the anova is significantly different them, we will draw a multiple mean comperision
tukey <- TukeyHSD(anova)
tukey
##5- Draw multiple comparison letters using "multcomp" R package as follow
group_letters <- multcompLetters4(anova, tukey)
group_letters
is.data.frame(group_letters)
is.vector(group_letters)
dim(group_letters)
labels(group_letters)
mean_data
chickwts
iris
rbind(mean_data, group_letters$feed)
cbind(mean_data, group_letters$feed)
myletters <- as.data.frame(group_letters$feed)
myletters
myletters <- as.data.frame(group_letters)
install.packages("emmeans")
install.packages("aLBI")
library(emmeans)
install.packages("emmeans")
install.packages("emmeans")
library(emmeans)
install.packages("emmeans")
library(emmeans)
library(emmeans)
##Barplot from scratch (one way anova)
library(ggplot2)
library(multcompView)
library(dplyr)
data <- chickwts
data
model <- aov(data$weight ~ data$feed)
model
tuke <- TukeyHSD(model)
tuke
plot(tuke)
emmean <- emmeans(model, specs = "feed")
emmean
emmean_cld <- cld(emmean, Letters = letters)
install.packages("multicom")
install.packages("multcom")
install.packages("multcomp")
library(multcomp)
library(multcomp)
emmean_cld <- cld(emmean, Letters = letters)
emmean <- emmeans(model, specs = "feed")
emmean_cld <- cld(emmean, Letters = letters)
library(emmeans)
library(multcomp)
emmean_cld <- cld(emmean, Letters = letters)
